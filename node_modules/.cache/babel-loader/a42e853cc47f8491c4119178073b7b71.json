{"ast":null,"code":"import _toConsumableArray from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/legeee/Desktop/todolist/src/TodoList.js\";\nimport React, { Component, Fragment } from 'react';\nimport TodoItem from './TodoItem.js';\nimport './style.css';\n\nvar TodoList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TodoList, _Component);\n\n  //每一个class里面都有constructor方法，且在首位\n  function TodoList(props) {\n    var _this;\n\n    _classCallCheck(this, TodoList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TodoList).call(this, props)); //state负责存储组件里的数据\n\n    _this.state = {\n      inputValue: '',\n      list: [] //把this的绑定统一放在顶部，不影响性能\n\n    };\n    _this.handleInputChange = _this.handleInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleBtnClick = _this.handleBtnClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleItemDelete = _this.handleItemDelete.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //事件绑定的时候可以用bind对函数的作用域进行变更，在JSX中使用JS需要加{}\n  //在React中，绑定事件的时候，第二个字母大写开头，onChange,onClick...  \n\n\n  _createClass(TodoList, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"insertArea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"\\u8F93\\u5165\\u5185\\u5BB9\"), React.createElement(\"input\", {\n        id: \"insertArea\",\n        className: \"input\",\n        value: this.state.inputValue,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleBtnClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"\\u63D0\\u4EA4\")), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, this.getTodoItem()));\n    }\n  }, {\n    key: \"getTodoItem\",\n    value: function getTodoItem() {\n      var _this2 = this;\n\n      return this.state.list.map(function (item, index) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, React.createElement(TodoItem, {\n          content: item,\n          index: index,\n          deleteItem: _this2.handleItemDelete,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46\n          },\n          __self: this\n        }));\n      });\n    } //\n    //对state里面的数据项进行变更，不能直接this.state.inputValue,要通过设置this.setState里面变更\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(e) {\n      var value = e.target.value;\n      this.setState(function () {\n        return {\n          inputValue: value\n        };\n      });\n    }\n  }, {\n    key: \"handleBtnClick\",\n    value: function handleBtnClick() {\n      // setState接收一个prevState参数，表示修改数据前一次的数据，这里等价于this.state\n      this.setState(function (prevState) {\n        return {\n          list: _toConsumableArray(prevState.list).concat([prevState.inputValue]),\n          inputValue: ''\n        };\n      });\n    }\n  }, {\n    key: \"handleItemDelete\",\n    value: function handleItemDelete(index) {\n      this.setState(function (prevState) {\n        var list = _toConsumableArray(prevState.list);\n\n        list.splice(index, 1);\n        return {\n          list: list\n        };\n      });\n    }\n  }]);\n\n  return TodoList;\n}(Component);\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/legeee/Desktop/todolist/src/TodoList.js"],"names":["React","Component","Fragment","TodoItem","TodoList","props","state","inputValue","list","handleInputChange","bind","handleBtnClick","handleItemDelete","getTodoItem","map","item","index","e","value","target","setState","prevState","splice"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAO,aAAP;;IACMC,Q;;;;;AACN;AACE,oBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,kFAAMA,KAAN,GADgB,CAEhB;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,IAAI,EAAE,EAFK,CAIb;;AAJa,KAAb;AAKA,UAAKC,iBAAL,GAAyB,MAAKA,iBAAL,CAAuBC,IAAvB,uDAAzB;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,uDAAtB;AACA,UAAKE,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBF,IAAtB,uDAAxB;AAVgB;AAWjB,G,CAGH;AACA;;;;;6BACW;AACP,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAO,QAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADH,EAEG;AACA,QAAA,EAAE,EAAC,YADH;AAEA,QAAA,SAAS,EAAC,OAFV;AAGA,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWC,UAHlB;AAG8B,QAAA,QAAQ,EAAE,KAAKE,iBAH7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAMG;AAAQ,QAAA,OAAO,EAAE,KAAKE,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANH,CAFF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKE,WAAL,EADL,CAVF,CADF;AAgBD;;;kCAEY;AAAA;;AACV,aAAO,KAAKP,KAAL,CAAWE,IAAX,CAAgBM,GAAhB,CAAoB,UAACC,IAAD,EAAMC,KAAN,EAAc;AACtC,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEE,oBAAC,QAAD;AACE,UAAA,OAAO,EAAED,IADX;AAEE,UAAA,KAAK,EAAEC,KAFT;AAGE,UAAA,UAAU,EAAE,MAAI,CAACJ,gBAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF;AAUO,OAXH,CAAP;AAYF,K,CAED;AACD;;;;sCACmBK,C,EAAE;AAClB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACA,WAAKE,QAAL,CAAc;AAAA,eAAO;AACnBb,UAAAA,UAAU,EAAEW;AADO,SAAP;AAAA,OAAd;AAGD;;;qCACe;AACd;AACA,WAAKE,QAAL,CAAc,UAACC,SAAD;AAAA,eAAgB;AAC5Bb,UAAAA,IAAI,qBAAMa,SAAS,CAACb,IAAhB,UAAsBa,SAAS,CAACd,UAAhC,EADwB;AAE5BA,UAAAA,UAAU,EAAE;AAFgB,SAAhB;AAAA,OAAd;AAID;;;qCACgBS,K,EAAM;AACrB,WAAKI,QAAL,CAAc,UAACC,SAAD,EAAe;AAC3B,YAAMb,IAAI,sBAAOa,SAAS,CAACb,IAAjB,CAAV;;AACAA,QAAAA,IAAI,CAACc,MAAL,CAAYN,KAAZ,EAAkB,CAAlB;AACA,eAAO;AAACR,UAAAA,IAAI,EAAJA;AAAD,SAAP;AACD,OAJD;AAKD;;;;EAzEoBP,S;;AA4EvB,eAAeG,QAAf","sourcesContent":["import React, { Component,Fragment } from 'react';\nimport TodoItem from './TodoItem.js';\nimport './style.css';\nclass TodoList extends Component {\n//每一个class里面都有constructor方法，且在首位\n  constructor(props){\n    super(props);\n    //state负责存储组件里的数据\n    this.state = {\n      inputValue: '',\n      list: []\n    }\n    //把this的绑定统一放在顶部，不影响性能\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleBtnClick = this.handleBtnClick.bind(this);\n    this.handleItemDelete = this.handleItemDelete.bind(this);    \n  }\n  \n\n//事件绑定的时候可以用bind对函数的作用域进行变更，在JSX中使用JS需要加{}\n//在React中，绑定事件的时候，第二个字母大写开头，onChange,onClick...  \n  render() {\n    return (\n      <Fragment>\n      {/*注释*/}\n        <div>\n           <label htmlFor='insertArea'>输入内容</label>\n           <input \n           id='insertArea'\n           className='input' \n           value={this.state.inputValue} onChange={this.handleInputChange} />\n           <button onClick={this.handleBtnClick}>提交</button>\n        </div>\n        <ul>\n            {this.getTodoItem()}\n        </ul>\n      </Fragment>\n    );\n  }\n\n  getTodoItem(){\n     return this.state.list.map((item,index)=>{\n        return (\n          <div>\n            {/*父组件content、index传递值，deleteItem传递方法*/}\n            <TodoItem \n              content={item} \n              index={index} \n              deleteItem={this.handleItemDelete}\n              />\n          </div>\n                )\n              })    \n  }\n\n  //\n //对state里面的数据项进行变更，不能直接this.state.inputValue,要通过设置this.setState里面变更\n  handleInputChange(e){\n    const value = e.target.value;\n    this.setState(() => ({\n      inputValue: value\n    }))\n  }\n  handleBtnClick(){\n    // setState接收一个prevState参数，表示修改数据前一次的数据，这里等价于this.state\n    this.setState((prevState) => ({\n      list: [...prevState.list, prevState.inputValue],\n      inputValue: ''\n    }))\n  }\n  handleItemDelete(index){\n    this.setState((prevState) => {\n      const list = [...prevState.list];\n      list.splice(index,1);\n      return {list}\n    })    \n  }\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}