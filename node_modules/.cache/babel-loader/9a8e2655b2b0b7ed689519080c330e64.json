{"ast":null,"code":"import _toConsumableArray from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/legeee/Desktop/todolist/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/legeee/Desktop/todolist/src/TodoList.js\";\nimport React, { Component, Fragment } from 'react';\nimport './style.css';\nimport TodoItem from './TodoItem.js';\n\nvar TodoList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TodoList, _Component);\n\n  //每一个class里面都有constructor方法，且在首位\n  function TodoList(props) {\n    var _this;\n\n    _classCallCheck(this, TodoList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TodoList).call(this, props)); //state负责存储组件里的数据\n\n    _this.state = {\n      inputValue: '',\n      list: []\n    };\n    return _this;\n  } //事件绑定的时候可以用bind对函数的作用域进行变更，在JSX中使用JS需要加{}\n  //在React中，绑定事件的时候，第二个字母大写开头，onChange,onClick...  \n\n\n  _createClass(TodoList, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"insertArea\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, \"\\u8F93\\u5165\\u5185\\u5BB9\"), React.createElement(\"input\", {\n        id: \"insertArea\",\n        className: \"input\",\n        value: this.state.inputValue,\n        onChange: this.handleInputChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleBtnClick.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"\\u63D0\\u4EA4\")), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, this.state.list.map(function (item, index) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(TodoItem, {\n          content: item,\n          index: index,\n          deleteItem: _this2.handleItemDelete.bind(_this2),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        }));\n      })));\n    } //\n    //对state里面的数据项进行变更，不能直接this.state.inputValue,要通过设置this.setState里面变更\n\n  }, {\n    key: \"handleInputChange\",\n    value: function handleInputChange(e) {\n      this.setState({\n        inputValue: e.target.value\n      });\n    }\n  }, {\n    key: \"handleBtnClick\",\n    value: function handleBtnClick() {\n      this.setState({\n        list: _toConsumableArray(this.state.list).concat([this.state.inputValue]),\n        inputValue: ''\n      });\n    }\n  }, {\n    key: \"handleItemDelete\",\n    value: function handleItemDelete(index) {\n      var list = _toConsumableArray(this.state.list);\n\n      list.splice(index, 1);\n      this.setState({\n        list: list\n      });\n    }\n  }]);\n\n  return TodoList;\n}(Component);\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/legeee/Desktop/todolist/src/TodoList.js"],"names":["React","Component","Fragment","TodoItem","TodoList","props","state","inputValue","list","handleInputChange","bind","handleBtnClick","map","item","index","handleItemDelete","e","setState","target","value","splice"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,OAAO,aAAP;AACA,OAAOC,QAAP,MAAqB,eAArB;;IACMC,Q;;;;;AACN;AACE,oBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,kFAAMA,KAAN,GADgB,CAEhB;;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,IAAI,EAAE;AAFK,KAAb;AAHgB;AAOjB,G,CACH;AACA;;;;;6BACW;AAAA;;AACP,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG;AAAO,QAAA,OAAO,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADH,EAEG;AACA,QAAA,EAAE,EAAC,YADH;AAEA,QAAA,SAAS,EAAC,OAFV;AAGA,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAWC,UAHlB;AAG8B,QAAA,QAAQ,EAAE,KAAKE,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAHxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFH,EAMG;AAAQ,QAAA,OAAO,EAAE,KAAKC,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBANH,CAFF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEM,KAAKJ,KAAL,CAAWE,IAAX,CAAgBI,GAAhB,CAAoB,UAACC,IAAD,EAAMC,KAAN,EAAc;AAChC,eACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAEA,oBAAC,QAAD;AAAU,UAAA,OAAO,EAAED,IAAnB;AAAyB,UAAA,KAAK,EAAEC,KAAhC;AAAuC,UAAA,UAAU,EAAE,MAAI,CAACC,gBAAL,CAAsBL,IAAtB,CAA2B,MAA3B,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFA,CADA;AAWD,OAZD,CAFN,CAVF,CADF;AA8BD,K,CACD;AACA;;;;sCACkBM,C,EAAE;AAElB,WAAKC,QAAL,CAAc;AACZV,QAAAA,UAAU,EAAES,CAAC,CAACE,MAAF,CAASC;AADT,OAAd;AAGD;;;qCACe;AACd,WAAKF,QAAL,CAAc;AACZT,QAAAA,IAAI,qBAAM,KAAKF,KAAL,CAAWE,IAAjB,UAAuB,KAAKF,KAAL,CAAWC,UAAlC,EADQ;AAEZA,QAAAA,UAAU,EAAE;AAFA,OAAd;AAID;;;qCACgBO,K,EAAM;AACrB,UAAMN,IAAI,sBAAO,KAAKF,KAAL,CAAWE,IAAlB,CAAV;;AACAA,MAAAA,IAAI,CAACY,MAAL,CAAYN,KAAZ,EAAkB,CAAlB;AACA,WAAKG,QAAL,CAAc;AACZT,QAAAA,IAAI,EAAEA;AADM,OAAd;AAGD;;;;EAhEoBP,S;;AAmEvB,eAAeG,QAAf","sourcesContent":["import React, { Component,Fragment } from 'react';\nimport './style.css';\nimport TodoItem from './TodoItem.js';\nclass TodoList extends Component {\n//每一个class里面都有constructor方法，且在首位\n  constructor(props){\n    super(props);\n    //state负责存储组件里的数据\n    this.state = {\n      inputValue: '',\n      list: []\n    }\n  }\n//事件绑定的时候可以用bind对函数的作用域进行变更，在JSX中使用JS需要加{}\n//在React中，绑定事件的时候，第二个字母大写开头，onChange,onClick...  \n  render() {\n    return (\n      <Fragment>\n      {/*注释*/}\n        <div>\n           <label htmlFor='insertArea'>输入内容</label>\n           <input \n           id='insertArea'\n           className='input' \n           value={this.state.inputValue} onChange={this.handleInputChange.bind(this)} />\n           <button onClick={this.handleBtnClick.bind(this)}>提交</button>\n        </div>\n        <ul>\n            {\n              this.state.list.map((item,index)=>{\n                return (\n                <div>\n                {/*父组件content、index传递值，deleteItem传递方法*/}\n                <TodoItem content={item} index={index} deleteItem={this.handleItemDelete.bind(this)}/>\n                {/*<li key={index} \n                onClick={this.handleItemDelete.bind(this,index)}\n                dangerouslySetInnerHTML={{__html: item}}\n                >\n                </li>*/}\n                </div>\n                )\n              })\n            }\n        </ul>\n      </Fragment>\n    );\n  }\n  //\n  //对state里面的数据项进行变更，不能直接this.state.inputValue,要通过设置this.setState里面变更\n  handleInputChange(e){\n    \n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n  handleBtnClick(){\n    this.setState({\n      list: [...this.state.list, this.state.inputValue],\n      inputValue: ''\n    })\n  }\n  handleItemDelete(index){\n    const list = [...this.state.list];\n    list.splice(index,1);\n    this.setState({\n      list: list\n    })\n  }\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}